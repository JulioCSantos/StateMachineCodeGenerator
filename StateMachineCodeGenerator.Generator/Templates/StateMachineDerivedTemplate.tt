<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="StateMachineMetadata.Model" #> 
<#@ import namespace="StateMachineMetadata.Extensions" #>
<#@ import namespace="StateMachineCodeGeneratorSystem.Templates" #>
// Created by t4 template '<#= this.GetType().Name #>'
<#@ include file="Parts/CopyrightHeader.t4" #>
<#@ include file="Parts/GensysQuickStartGuide.t4" #>
<# var model = StateMachineMetadata.Main.ActiveModel; #>
using System;
using System.Collections.Generic;
using System.Threading;
using System.ComponentModel;
using Corning.GenSys.Logger;
using NorthStateSoftware.NorthStateFramework;
using System.Threading.Tasks;
using System.Linq;
using Corning.GenSys.Scanning;

namespace <#= Session["NameSpace"].ToString() #>
{
    // ReSharper disable once InconsistentNaming
    public class <#= Session["typeName"].ToString() #> : <#= Session["StateMachineBaseTypeName"].ToString() #>
    {
        internal <#= Session["typeName"].ToString() #>(string strName, <#= Session["StateMachineModelDerivedTypeName"].ToString() #> mainModel) 
            : base(strName, mainModel) { }

        public override void BeforeCreateStateMachine()
        {
            //OperatorPromptForStateDict.Add(EState.Idle,"get the ball rolling"); //example
        }

        public override void AfterCreateStateMachine()
        {
        }
    }
}