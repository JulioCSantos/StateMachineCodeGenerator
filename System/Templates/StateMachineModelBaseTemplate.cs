// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace StateMachineCodeGeneratorSystem.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using StateMachineMetadata.Extensions;
    using StateMachineMetadata.Model;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class StateMachineModelBaseTemplate : StateMachineModelBaseTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write(" \r\n");
            this.Write(" \r\n// Created by t4 template \'");
            
            #line 8 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetType().Name));
            
            #line default
            #line hidden
            this.Write("\'\r\n");
            this.Write("///////////////////////////////////////////////////////////\r\n// Copyright © Corni" +
                    "ng Incorporated 2017\r\n// File ");
            
            #line 8 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\Parts/CopyrightHeader.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["fileName"].ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n// Project ");
            
            #line 9 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\Parts/CopyrightHeader.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["projectName"].ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n// Implementation of the Class ");
            
            #line 10 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\Parts/CopyrightHeader.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["typeName"].ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n// Created on ");
            
            #line 11 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\Parts/CopyrightHeader.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToLocalTime().ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n///////////////////////////////////////////////////////////");
            this.Write("\r\n");
            
            #line 10 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
 var model = StateMachineMetadata.Main.ActiveModel; 
            
            #line default
            #line hidden
            this.Write(@"using System;
using System.Collections.Generic;
using System.Threading;
using System.ComponentModel;
using Corning.GenSys.Logger;
using NorthStateSoftware.NorthStateFramework;
using System.Threading.Tasks;
using System.Linq;
using System.Runtime.CompilerServices;
using GenSysCommon;
using GenSysCommon.Interfaces;
using Corning.GenSys.MVVMCommon;

namespace XYZPDQ.Model
{
    // ReSharper disable once InconsistentNaming
    public class ");
            
            #line 27 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["typeName"].ToString()));
            
            #line default
            #line hidden
            this.Write(" : INotifyPropertyChanged\r\n    {\r\n        private ");
            
            #line 29 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["StateMachineDerivedTypeName"].ToString()));
            
            #line default
            #line hidden
            this.Write(" stateMachine;\r\n        public ");
            
            #line 30 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["StateMachineDerivedTypeName"].ToString()));
            
            #line default
            #line hidden
            this.Write(@" StateMachine 
		{ 
			get { return stateMachine; }
			protected set {
				stateMachine = value;
                if (stateMachine != null)
                    this.StateMachine.StateChangesAtStateEvent += StateChangesAtState;
			}
		}
        private static readonly ILogger ms_iLogger = CLoggerFactory.CreateLog(""");
            
            #line 39 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["typeName"].ToString()));
            
            #line default
            #line hidden
            this.Write("\");\r\n\r\n        #region Constructors\r\n        protected internal ");
            
            #line 42 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["typeName"].ToString()));
            
            #line default
            #line hidden
            this.Write("() { }\r\n        #endregion Constructors\r\n\r\n        #region ExceptionsToFaults\r\n  " +
                    "      public virtual void RegisterFaultEventMethods()\r\n        {\r\n");
            
            #line 48 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
   foreach (var faultTriggerName in model.NSF.GetFaultTriggerNames())  { 
            
            #line default
            #line hidden
            
            #line 49 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
   var faultName = faultTriggerName.Replace("Fault", "").ToValidCSharpName(); 
            
            #line default
            #line hidden
            this.Write("            //var ");
            
            #line 50 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(faultName));
            
            #line default
            #line hidden
            this.Write("Publisher = C");
            
            #line 50 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(faultName));
            
            #line default
            #line hidden
            this.Write(".GetInstance();\r\n            //EventBroker.Instance.RegisterEvent(");
            
            #line 51 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(faultName));
            
            #line default
            #line hidden
            this.Write("Publisher, \"");
            
            #line 51 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(faultName));
            
            #line default
            #line hidden
            this.Write("FaultEvent\", eventId:");
            
            #line 51 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(faultName));
            
            #line default
            #line hidden
            this.Write("FaultEventId);\r\n            EventBroker.Instance.RegisterEventMethods(");
            
            #line 52 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(faultName));
            
            #line default
            #line hidden
            this.Write("FaultEventId, this, nameof(");
            
            #line 52 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(faultName));
            
            #line default
            #line hidden
            this.Write("ExceptionTo");
            
            #line 52 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(faultName));
            
            #line default
            #line hidden
            this.Write("Fault));\r\n\r\n");
            
            #line 54 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n");
            
            #line 57 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
   foreach (var faultTriggerName in model.NSF.GetFaultTriggerNames())  { 
            
            #line default
            #line hidden
            
            #line 58 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
   var faultName = faultTriggerName.Replace("Fault", "").ToValidCSharpName(); 
            
            #line default
            #line hidden
            this.Write("        public virtual string ");
            
            #line 59 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(faultName));
            
            #line default
            #line hidden
            this.Write("FaultEventId { get { return nameof(");
            
            #line 59 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(faultName));
            
            #line default
            #line hidden
            this.Write("FaultEventId); } } \r\n        public virtual void ");
            
            #line 60 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(faultName));
            
            #line default
            #line hidden
            this.Write("ExceptionTo");
            
            #line 60 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(faultName));
            
            #line default
            #line hidden
            this.Write("Fault(object sender, EventArgs args)\r\n        {\r\n            StateMachine.SendSta" +
                    "teEvent(TriggerName.");
            
            #line 62 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(faultName));
            
            #line default
            #line hidden
            this.Write("FaultEvent);\r\n        }\r\n\r\n");
            
            #line 65 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        #endregion ExceptionsToFaults\r\n\r\n        #region State indicators (\"IsIn." +
                    "..\")\r\n\r\n");
            
            #line 70 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
  foreach (var state in model.States.OfType<State>().OrderBy(s => s.Name))  {  
        var fieldName = "isIn" + state.Name.Substring(0,1).ToUpper() + state.Name.Substring(1);
        var propName =  "IsIn" + state.Name.Substring(0,1).ToUpper() + state.Name.Substring(1);

            
            #line default
            #line hidden
            this.Write("        #region ");
            
            #line 74 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propName));
            
            #line default
            #line hidden
            this.Write("\r\n        private bool ");
            
            #line 75 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));
            
            #line default
            #line hidden
            this.Write(";\r\n        public bool ");
            
            #line 76 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propName));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            get { return ");
            
            #line 78 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));
            
            #line default
            #line hidden
            this.Write("; }\r\n            internal set { SetProperty(ref ");
            
            #line 79 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));
            
            #line default
            #line hidden
            this.Write(", value); }\r\n        }\r\n        #endregion ");
            
            #line 81 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propName));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 83 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n        #endregion State indicators (\"IsIn...\")\r\n\r\n        #region States Actio" +
                    "ns\r\n        \r\n");
            
            #line 89 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
  var previousActionNames = new HashSet<string>();
    foreach (var state in model.States.OfType<State>().OrderBy(s => s.Name))  {  
        if (state.EntryActions.Any()) {
            
            #line default
            #line hidden
            
            #line 92 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
          foreach (var sAction in state.EntryActions.Where(a => string.IsNullOrEmpty(a) == false)) { 
                if (previousActionNames.Add(sAction) == false) continue; //avoid duplicates 
            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// ");
            
            #line 95 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(state.Name));
            
            #line default
            #line hidden
            this.Write("\'s Action\r\n        /// </summary>\r\n        public virtual async Task ");
            
            #line 97 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sAction));
            
            #line default
            #line hidden
            this.Write("() { await Task.CompletedTask; }\r\n\r\n");
            
            #line 99 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
          }
            
            #line default
            #line hidden
            
            #line 100 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
      }
            
            #line default
            #line hidden
            
            #line 101 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
      if (state.ExitActions.Any()) {
            
            #line default
            #line hidden
            
            #line 102 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
          foreach (var sAction in state.ExitActions.Where(a => string.IsNullOrEmpty(a) == false)) { 
                if (previousActionNames.Add(sAction) == false) continue; //avoid duplicates 
            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// ");
            
            #line 105 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(state.Name));
            
            #line default
            #line hidden
            this.Write("\'s Action\r\n        /// </summary>        \r\n        public virtual async Task ");
            
            #line 107 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sAction));
            
            #line default
            #line hidden
            this.Write("() { await Task.CompletedTask; }\r\n\r\n");
            
            #line 109 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
          }
            
            #line default
            #line hidden
            
            #line 110 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
      }
            
            #line default
            #line hidden
            
            #line 111 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n        #endregion States Actions\r\n\r\n\t    #region Transitions Actions\r\n");
            
            #line 116 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
  var previousActions = new HashSet<string>();
    var previousTActs = new HashSet<string>();
    foreach (var group in model.NSF.GetGroupedTransitions())  {  
        foreach (var trans in group.GroupBy(g => g.Name).Select(g => g.First()).Where(t => string.IsNullOrEmpty(t.ActionName) == false)) { 
            if (previousActions.Add(trans.ActionName) == false) continue; //avoid duplicates
            var eTrans= trans as ExternalTransition;
            var iTrans= trans as InternalTransition;
            string triggerName = "'trigger is missing'"; 
            if (trans.Trigger != null) triggerName = trans.Trigger.Name; 

            
            #line default
            #line hidden
            
            #line 126 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
          foreach (var tAct in model.NSF.Model.Transitions.Where(t => t.ActionName == trans.ActionName && t.Actions != null).SelectMany(t => t.Actions).Distinct() ) 
            {
                if (previousTActs.Add(tAct) == false) continue; //avoid duplicates
                if (StringExtensions.IsValidIdentifier(tAct) == false) { 
                    Ext.WriteTokensAtTabs(this,2, "// +++ Invalid Action name '" + tAct.ToString() + "' in " + triggerName);
                    continue; 
                }

            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// ");
            
            #line 135 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.Name));
            
            #line default
            #line hidden
            this.Write(":\r\n");
            
            #line 136 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
              if (eTrans != null) Ext.WriteTokensAtTabs(this, 2,"/// This method is called when the '" +  eTrans.SourceState.Name + "' transitions to '" + eTrans.Target.Name + "'");
                else Ext.WriteTokensAtTabs(this, 2,"/// This method is called when transitioning from '" +  iTrans.SourceState.Name + "'"); 
            
            #line default
            #line hidden
            this.Write("        /// triggered by \'");
            
            #line 138 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(triggerName));
            
            #line default
            #line hidden
            this.Write("\' \r\n        /// </summary>\r\n        /// <param name=\"oContext\">Information about " +
                    "the states before and after the transition as well as the transition and trigger" +
                    ".</param>\r\n        /// <returns>Nothing</returns>\r\n        public virtual async " +
                    "Task ");
            
            #line 142 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tAct));
            
            #line default
            #line hidden
            this.Write("(NSFStateMachineContext oContext)\r\n        {\r\n            await Task.CompletedTas" +
                    "k;\r\n        }\r\n");
            
            #line 146 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
          } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 148 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
        } 
    } 
            
            #line default
            #line hidden
            this.Write("\t\t#endregion Transitions Actions\r\n\r\n\t    #region Transitions Guards\r\n");
            
            #line 153 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
  var previousGuards = new HashSet<string>();
    foreach (var group in model.NSF.GetGroupedTransitions())  {  
        foreach (var trans in group.GroupBy(g => g.Name).Select(g => g.First()).Where(t => string.IsNullOrEmpty(t.GuardName) == false)) { 
            if (previousGuards.Add(trans.GuardName) == false) continue; //avoid duplicates 
            if (trans.GuardName == null || trans.GuardName.ToUpper() == "NONE") continue; //skip "None" or "null" Guards
            if (trans.GuardName.ToUpper() == "ELSE") continue; //skip Guards named "Else"
            var simulationIndicatorName = trans.GuardName + "_InSimulationMode";
            var simulationValueName= trans.GuardName + "_SimulatedValue";

            
            #line default
            #line hidden
            this.Write("        // ReSharper disable once InconsistentNaming\r\n        private bool ");
            
            #line 163 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.GuardName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write(";\r\n        /// <summary>\r\n        /// A Guard function returning the State of \'");
            
            #line 165 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.GuardName));
            
            #line default
            #line hidden
            this.Write("\'.\r\n        /// Defined at Transition ");
            
            #line 166 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.Name));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </summary>\r\n        /// <returns>guard result</returns>\r\n        //" +
                    " ReSharper disable once InconsistentNaming\r\n        public virtual bool ");
            
            #line 170 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.GuardName));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            get {\r\n                    ms_iLogger.Log(ELogLevel.Info" +
                    ", \"\'");
            
            #line 173 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.GuardName));
            
            #line default
            #line hidden
            this.Write("\' not initialized\");\r\n                    throw new NotImplementedException(); \r\n" +
                    "                }\r\n                set { ");
            
            #line 176 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.GuardName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write(" = value; }\r\n    }\r\n\r\n");
            
            #line 179 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
        } 
    } 
            
            #line default
            #line hidden
            this.Write("\t\t#endregion Transitions Guards\r\n\r\n        #region States changes handling\r\n");
            
            #line 184 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
 var AtStateMethods = new HashSet<string>();
    foreach (var trans in model.Transitions.Where(t => t.Trigger != null && t.Trigger.Name != null).OrderBy(t => t.SourceState.Name))  { 
        if (AtStateMethods.Add(trans.SourceState.Name) == false) continue; //avoid duplicates 

            
            #line default
            #line hidden
            this.Write("        public virtual async Task At");
            
            #line 188 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.SourceState.Name.ToValidCSharpName()));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n            //StateMachine.SendStateEvent(TriggerName.");
            
            #line 190 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.Trigger.Name));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\tawait Task.CompletedTask;\r\n        }\r\n\r\n");
            
            #line 194 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"
        #endregion States changed

        #region State changes handling
        public async void StateChangesAtState(object sender, StateChangesEventArgs eventArgs)
        {
            if (eventArgs.HandledStateName == null) return;
            EState eState;
            Enum.TryParse(eventArgs.HandledStateName, out eState);
            if (eState == EState.none) System.Diagnostics.Debugger.Break();

            switch (eState)
            {
");
            
            #line 208 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
 var stateCases = new HashSet<string>();
    foreach (var trans in model.Transitions.Where(t => t.Trigger != null && t.Trigger.Name != null).OrderBy(t => t.SourceState.Name))  { 
        if (stateCases.Add(trans.SourceState.Name) == false) continue; //avoid duplicates 

            
            #line default
            #line hidden
            this.Write("\r\n                case EState.");
            
            #line 213 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.SourceState.Name.ToValidCSharpName().Replace("State","")));
            
            #line default
            #line hidden
            this.Write(":\r\n                    try { await At");
            
            #line 214 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.SourceState.Name.ToValidCSharpName()));
            
            #line default
            #line hidden
            this.Write(@"(); }
                    catch (Exception e)
                    {
                        ms_iLogger.LogException(ELogLevel.Error, e.Source, e);
                        StateMachine.SendStateEvent(TriggerName.UndefinedFaultEvent);
                    }
                    break;
");
            
            #line 221 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            }\r\n        } \r\n        #endregion State changes handling\r\n\r\n\r\n\t\t#re" +
                    "gion CancellationTokenSources\r\n\r\n");
            
            #line 230 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
    foreach (var faultTriggerName in (new List<string>(){"MainFault"}).Union(model.NSF.GetFaultTriggerNames()))  { 
            
            #line default
            #line hidden
            
            #line 231 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
   var propertyName = faultTriggerName.ToValidCSharpName() + "CancellationTokenSource"; 
            
            #line default
            #line hidden
            
            #line 232 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
   var backingField = "_" + propertyName.Substring(0,1).ToLower() + propertyName.Substring(1); 
            
            #line default
            #line hidden
            this.Write("        #region ");
            
            #line 233 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            
            #line default
            #line hidden
            this.Write("\r\n        private CancellationTokenSource ");
            
            #line 234 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(backingField));
            
            #line default
            #line hidden
            this.Write(";\r\n        public CancellationTokenSource ");
            
            #line 235 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            get { return ");
            
            #line 237 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(backingField));
            
            #line default
            #line hidden
            this.Write(" ?? (");
            
            #line 237 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            
            #line default
            #line hidden
            this.Write(" = new CancellationTokenSource()); }\r\n            set \r\n            { \r\n         " +
                    "       ");
            
            #line 240 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(backingField));
            
            #line default
            #line hidden
            this.Write("?.Dispose();\r\n                SetProperty(ref ");
            
            #line 241 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(backingField));
            
            #line default
            #line hidden
            this.Write(", value); \r\n            }\r\n        }\r\n        #endregion ");
            
            #line 244 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 246 "c:\projects\PROJ_Common\DevBranches\DevDale\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineModelBaseTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"		#endregion CancellationTokenSources


        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        public void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        protected virtual bool SetProperty<T>(ref T prevValue, T value, [CallerMemberName] string propertyName = null)
        {
            if (Equals(prevValue, value)) return false;
            prevValue = value;
            this.RaisePropertyChanged(propertyName);
            return true;
        }
        #endregion INotifyPropertyChanged
    }
}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class StateMachineModelBaseTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
