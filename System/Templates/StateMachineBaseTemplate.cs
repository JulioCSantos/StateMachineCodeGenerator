// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace StateMachineCodeGeneratorSystem.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using StateMachineMetadata.Model;
    using StateMachineMetadata.Extensions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class StateMachineBaseTemplate : StateMachineBaseTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write(" \r\n");
            this.Write(" \r\n// Created by t4 template \'");
            
            #line 8 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetType().Name));
            
            #line default
            #line hidden
            this.Write("\'\r\n");
            this.Write("///////////////////////////////////////////////////////////\r\n// Copyright © Corni" +
                    "ng Incorporated 2017\r\n// File ");
            
            #line 8 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\Parts/CopyrightHeader.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["fileName"].ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n// Project ");
            
            #line 9 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\Parts/CopyrightHeader.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["projectName"].ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n// Implementation of the Class ");
            
            #line 10 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\Parts/CopyrightHeader.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["typeName"].ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n// Created on ");
            
            #line 11 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\Parts/CopyrightHeader.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToLocalTime().ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n///////////////////////////////////////////////////////////");
            this.Write("\r\n");
            this.Write("\r\n// Quick Start Guide for those using the GenSys Easy for the first time:\r\n// Fi" +
                    "rst time users will primarily be interested in three states: Ready, Idle, and Ru" +
                    "nning. The Idle and Running states are sub-states of the Ready State.\r\n// The Re" +
                    "ady state is entered after initialization and then the State Machine proceeds to" +
                    " the Idle State.\r\n// The Idle state is intended to be a \"waiting\" state with not" +
                    "hing significant happening.\r\n// The Running state is intended to be the state wh" +
                    "ere your task is accomplished.\r\n\r\n\r\n// Here are the rules for the Ready, Idle an" +
                    "d Running States\r\n// The method \"ReadyStateEntryActions\"   is called after initi" +
                    "aliztion has completed.\r\n// The method \"ReadyStateExitActions\"    is called afte" +
                    "r if a Fault occurs.\r\n// The method \"IdleStateEntryActions\"    is called after e" +
                    "ither \"ReadyStateEntryActions\" or \"RunningStateExitActions\" is called.\r\n// The m" +
                    "ethod \"IdleStateExitActions\"     is called when the Start button is pressed.\r\n//" +
                    " The method \"RunningStateEntryActions\" is called when the Start button is presse" +
                    "d but after \"IdleStateExitActions\" is called.\r\n// The method \"RunningStateExitAc" +
                    "tions\"  is called when the Abort button is pressed.\r\n\r\n\r\n// To start developing " +
                    "an Application utilizing a Start and Abort button:\r\n// Place Initialization Code" +
                    " in \"ReadyStateEntryActions\". A call into the sytem may be needed.\r\n// Place cod" +
                    "e to call into system to perform your task in \"RunningStateEntryActions\".\r\n// If" +
                    " a System thread was kicked off to start a task, then place a call in \"RunningSt" +
                    "ateExitActions\" to call into the system to stop the thread.\r\n\r\n// To start devel" +
                    "oping an application which doesn\'t require user interaction and just performs a " +
                    "task, place code to call into the System in \"IdleStateEntryActions\" and\r\n// unco" +
                    "mment \"m_iShield.EnableStartButton = false; \"  in \"IdleStateEntryActions\".\r\n// T" +
                    "his default template has code to show how to use the Start and Abort button in c" +
                    "onjunction with calling into the System, which uses the ThreadHandler.\r\n// When " +
                    "Start is pressed a message will be display every second until one of two conditi" +
                    "ons are met:\r\n// 20 Messages have been displayed or\r\n// The Abort button is pres" +
                    "sed.\r\n\r\n// It is expected that this and the System code will be heavily modified" +
                    ".\r\n// Note that the State Machine uses System to do all of the real work.\r\n// Th" +
                    "e desired pattern is the State Machine not implementing any Application code.\r\n\r" +
                    "\n// The method CreateOperatorPrompts() creates GUI prompts based on the state of" +
                    " the State Machine.\r\n// As the State Machine state changes, so does the GUI prom" +
                    "pt.\r\n// The following two statement are included in the code as part of the Quic" +
                    "k Start Guide and may be tailored for your application.\r\n// m_odictOperatorPromp" +
                    "tForState.Add(oIdleState, \"Hit Start to Start Running\");\r\n// m_odictOperatorProm" +
                    "ptForState.Add(oRunningState, \"Hit Abort to Stop Running\");\r\n");
            this.Write("\r\n");
            
            #line 11 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
 var model = StateMachineMetadata.Main.ActiveModel; 
            
            #line default
            #line hidden
            this.Write(@"using System;
using System.Windows;
using System.Drawing;
using System.Collections.Generic;
using System.Threading;
using System.ComponentModel;
using Corning.GenSys.Logger;
using NorthStateSoftware.NorthStateFramework;
using System.Threading.Tasks;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using Corning.GenSys.Scanning;
using GenSysCommon;
using GenSysCommon.Interfaces;
using NSFEventName = System.String;

// ReSharper disable InconsistentNaming
namespace XYZPDQ.Model
{
    public partial class ");
            
            #line 32 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["typeName"].ToString()));
            
            #line default
            #line hidden
            this.Write(" : NSFStateMachine \r\n    {\r\n        #region Fields and Properties\r\n        intern" +
                    "al static ILogger ms_iLogger = CLoggerFactory.CreateLog(\"C");
            
            #line 35 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ProjectName));
            
            #line default
            #line hidden
            this.Write("StateMachine\");\r\n        public const string StateMachineName = \"");
            
            #line 36 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ProjectName));
            
            #line default
            #line hidden
            this.Write(@""";
        //private object m_objLock = new object();

        public Dictionary<NSFEventName, NSFEvent> Triggers { get; } = new Dictionary<NSFEventName, NSFEvent>();
        public string SystemState {get; private set;}
        public EState? CurrentState { get; private set; }
        public EState? PreviousState { get; private set; }
        public NSFStateMachineContext CurrentContext { get; private set; }
        public NSFStateMachineContext PreviousContext { get; private set; }

        //private bool m_bSimulationMode = false;

        #region OperatorPromptForStateDict
        private Dictionary<EState, (string OperatorPrompt, bool HighlightPrompt)> m_odictOperatorPromptForState;
        public Dictionary<EState, (string OperatorPrompt, bool HighlightPrompt)> OperatorPromptForStateDict
            { get { return m_odictOperatorPromptForState ?? (m_odictOperatorPromptForState = new Dictionary<EState, (string OperatorPrompt, bool HighlightPrompt)>() ); } }
        #endregion OperatorPromptForStateDict
       
        public string LastOperatorPrompt { get; private set; }
		public virtual string UndefinedFaultEvent { get; } = TriggerName.UndefinedFaultEvent;
        public ");
            
            #line 56 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["StateMachineModelDerivedTypeName"].ToString()));
            
            #line default
            #line hidden
            this.Write(@" MainModel {get; }
        
        private StateChangesEventArgs _stateChangesEventArgs;
        public StateChangesEventArgs StateChangesEventArgs
        {
            get { return _stateChangesEventArgs ?? (_stateChangesEventArgs = new StateChangesEventArgs( /*CurrentContext, MetaData*/ )); }
            //set { _stateChangesEventArgs = value; }
        }
        #endregion Fields and Properties

        #region Constructors
        protected internal ");
            
            #line 67 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["typeName"].ToString()));
            
            #line default
            #line hidden
            this.Write("(string strName, ");
            
            #line 67 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["StateMachineModelDerivedTypeName"].ToString()));
            
            #line default
            #line hidden
            this.Write(" mainModel) \r\n\t\t\t: base(strName, new NSFEventThread(strName)) \r\n        { \r\n     " +
                    "       MainModel = mainModel; \r\n            CreateStateMachine();\r\n            /" +
                    "/MetaData = GetMetadata();\r\n        }\r\n\r\n        //private StateMachineMetaData " +
                    "_metaData;\r\n        //public StateMachineMetaData MetaData\r\n        //{\r\n       " +
                    "     //get { return _metaData ?? (_metaData = new StateMachineMetaData()); }\r\n  " +
                    "          //set { _metaData = value; }\r\n        //}\r\n\r\n\r\n        private StateMa" +
                    "chineMetaData GetMetadata()\r\n        {\r\n            var metaData = new StateMach" +
                    "ineMetaData();\r\n            var triggersInfo = this.GetType().GetFields(BindingF" +
                    "lags.Instance | BindingFlags.NonPublic | BindingFlags.Public)\r\n                ." +
                    "Where(pi => pi.FieldType == typeof(NSFEvent)).ToList();\r\n\r\n            foreach (" +
                    "var triggerInfo in triggersInfo)\r\n            {\r\n                var nEvent = tr" +
                    "iggerInfo.GetValue(this) as NSFEvent;\r\n                var trigger = new Trigger" +
                    "Event(nEvent);\r\n                metaData.TriggerEvents.Add(trigger.Name, trigger" +
                    ");\r\n            }\r\n\r\n            var statesInfo = this.GetType().GetFields(Bindi" +
                    "ngFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)\r\n              " +
                    "  .Where(pi => pi.FieldType == typeof(NSFInitialState) || pi.FieldType == typeof" +
                    "(NSFCompositeState) || pi.FieldType == typeof(NSFChoiceState)).ToList();\r\n\r\n\r\n  " +
                    "          foreach (var stateInfo in statesInfo)\r\n            {\r\n                " +
                    "var nState = stateInfo.GetValue(this) as NSFState;\r\n                StateBase st" +
                    "ate = null;\r\n                if (stateInfo.FieldType == typeof(NSFCompositeState" +
                    ")) state = new CompositeState(nState as NSFCompositeState);\r\n                if " +
                    "(stateInfo.FieldType == typeof(NSFInitialState)) state = new InitialState(nState" +
                    " as NSFInitialState);\r\n                if (stateInfo.FieldType == typeof(NSFChoi" +
                    "ceState)) state = new ChoiceState(nState as NSFChoiceState);\r\n                if" +
                    " (state != null) metaData.States.Add(state.Name, state);\r\n                else S" +
                    "ystem.Diagnostics.Debugger.Break();\r\n            }\r\n\r\n            var transition" +
                    "sInfo = this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPub" +
                    "lic | BindingFlags.Public)\r\n                .Where(pi => pi.PropertyType == type" +
                    "of(NSFExternalTransition) || pi.PropertyType == typeof(NSFInternalTransition)).T" +
                    "oList();\r\n\r\n            foreach (var transInfo in transitionsInfo)\r\n            " +
                    "{\r\n                var nTrans = transInfo.GetValue(this) as NSFTransition;\r\n    " +
                    "            TransitionBase trans = null;\r\n                if (transInfo.Property" +
                    "Type == typeof(NSFExternalTransition))\r\n                {\r\n                    t" +
                    "rans = new ExternalTransition(nTrans as NSFExternalTransition);\r\n               " +
                    "     var extTrans = trans as ExternalTransition;\r\n                    extTrans.S" +
                    "ourceState = metaData.States[nTrans.Source.Name] as CompositeState;\r\n           " +
                    "         extTrans.TargetState = metaData.States[nTrans.Target.Name] as Composite" +
                    "State;\r\n                    //if (extTrans.SourceState == null || extTrans.Targe" +
                    "tState == null) System.Diagnostics.Debugger.Break();\r\n                }\r\n\r\n     " +
                    "           if (transInfo.PropertyType == typeof(NSFInternalTransition))\r\n       " +
                    "         {\r\n                    trans = new InternalTransition(nTrans as NSFInte" +
                    "rnalTransition);\r\n                    var intTrans = trans as InternalTransition" +
                    ";\r\n                    if (intTrans.State != null)\r\n                        intT" +
                    "rans.State = metaData.States[intTrans.State.Name] as CompositeState;\r\n          " +
                    "          //else System.Diagnostics.Debugger.Break();\r\n                }\r\n\r\n    " +
                    "            if (trans == null) System.Diagnostics.Debugger.Break();\r\n           " +
                    "     else {\r\n                    if (nTrans.Triggers.Any())\r\n                   " +
                    "     trans.TriggerEvent = metaData.TriggerEvents[nTrans.Triggers.First().Name];\r" +
                    "\n                    //else System.Diagnostics.Debugger.Break();\r\n              " +
                    "      metaData.Transitions.Add(trans.Name, trans);\r\n                }\r\n         " +
                    "   }\r\n\r\n            return metaData;\r\n        }\r\n        #endregion Constructors" +
                    "\r\n\r\n\t\t#region Events\r\n");
            
            #line 150 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
 foreach (var triggerName in model.NSF.GetTriggerNames())  { 
            
            #line default
            #line hidden
            this.Write("\t\tpublic NSFEvent o");
            
            #line 151 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(triggerName.ToValidCSharpName()));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 152 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t#endregion Events\r\n\r\n\r\n\t\t#region States\r\n");
            
            #line 157 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
  foreach (var group in model.NSF.GetNamedStatesGroupedByOwner())  {  
            
            #line default
            #line hidden
            
            #line 158 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
      if (group.Key == null) Ext.WriteTokensAtTabs(this, 2, "// root state definition"); 
        else Ext.WriteTokensAtTabs(this, 2, "// " + group.Key.Name + "'s substate definitions");  
            
            #line default
            #line hidden
            
            #line 160 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
      foreach (var state in group) {
            Ext.WriteTokensAtTabs(this, 2,"public " + state.ToNSFType(), 9,"o" + state.Name + ";");
        }
    } 
            
            #line default
            #line hidden
            this.Write("        \r\n        #endregion States\r\n\r\n        #region StateLocations\r\n\r\n        " +
                    "private Dictionary<string, Rectangle> dictStateLocation = new Dictionary<string," +
                    " Rectangle>{\r\n\r\n");
            
            #line 171 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
      foreach (var group in model.NSF.GetNamedStatesGroupedByOwner())  
        {  
            if (group.Key == null) 
                Ext.WriteTokensAtTabs(this, 2, "// root state definition"); 
            else 
                Ext.WriteTokensAtTabs(this, 2, " // " + group.Key.Name + "'s substates");
            foreach (var state in group) 
            {
                Ext.WriteTokensAtTabs(this, 2," {\"" + state.Name + "\", new Rectangle(" + state.Coord.Left + "," + state.Coord.Top.ToString() + "," + 
                            (state.Coord.Right - state.Coord.Left).ToString() + "," + (state.Coord.Bottom - state.Coord.Top).ToString() + ")}, " );
            }
        }  
            
            #line default
            #line hidden
            this.Write(@"        {""LastState"", new Rectangle(1, 2, 3, 4)}};

        public Dictionary<string, Rectangle> DictStateLocation
        {
            get => dictStateLocation;
            set => dictStateLocation = value;
        }
		#endregion StateLocations

		#region Transitions
");
            
            #line 193 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
  foreach (var group in model.NSF.GetGroupedTransitions())  {  
            
            #line default
            #line hidden
            
            #line 194 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
      if (group.Key == null) Ext.WriteTokensAtTabs(this, 2, "// root Transitions' definitions"); 
        else Ext.WriteTokensAtTabs(this, 2, "// From " + group.Key.Name + " Transitions' definitions");  
            
            #line default
            #line hidden
            
            #line 196 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
      foreach (var transition in group.GroupBy(g => g.Name).Select(g => g.First())) { 
            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 197 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(transition.ToNSFType()));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 197 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(transition.Name));
            
            #line default
            #line hidden
            this.Write(" {get; private set;}\r\n");
            
            #line 198 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
      } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 200 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\t\t#endregion Transitions\r\n\r\n        private void CreateStateMachine()\r\n        {\r" +
                    "\n\r\n            BeforeCreateStateMachine();\r\n\r\n\t\t    #region Events  instantiatio" +
                    "ns\r\n");
            
            #line 209 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
 foreach (var triggerName in model.NSF.GetTriggerNames())  { 
            
            #line default
            #line hidden
            this.Write("\t\t    o");
            
            #line 210 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(triggerName));
            
            #line default
            #line hidden
            this.Write(" = new NSFEvent(nameof(o");
            
            #line 210 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(triggerName));
            
            #line default
            #line hidden
            this.Write("), this, this);\r\n");
            
            #line 211 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 213 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
 foreach (var triggerName in model.NSF.GetTriggerNames())  { 
            
            #line default
            #line hidden
            this.Write("            Triggers.Add(TriggerName.");
            
            #line 214 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(triggerName.ToValidCSharpName()));
            
            #line default
            #line hidden
            this.Write(", o");
            
            #line 214 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(triggerName.ToValidCSharpName()));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 215 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t    #endregion Events\r\n\r\n\t\t    #region States instantiations\r\n");
            
            #line 219 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
  foreach (var group in model.NSF.GetNamedStatesGroupedByOwner())  {  
            
            #line default
            #line hidden
            
            #line 220 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
      if (group.Key == null) Ext.WriteTokensAtTabs(this, 3, "// root state instantiation"); 
        else Ext.WriteTokensAtTabs(this, 3, "// " + group.Key.Name + "'s substate instantiation");  
            
            #line default
            #line hidden
            
            #line 222 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
      foreach (var state in group) {
            var name = state.Name;
            var oName = "o" + state.Name;
            var ownrName = state.Owner == null ? "this" : "o" + state.Owner.Name ;
            if (state is StateMachineMetadata.Model.State) { 
                string enterAction;
                if (state.EntryActions.Any()) enterAction = "(c) => " + name + "EnteredAsync(c, " + oName + ")";
                else enterAction = "(c) => RaiseStateEnterEvent(c, " + oName + ")";
                string exitAction;
                if (state.ExitActions.Any()) exitAction = "(c) => " + name + "ExitedAsync(c, " + oName + ")";
                else exitAction = "(c) => RaiseStateExitEvent(c, " + oName + ")";
                Ext.WriteTokensAtTabs(this, 3, oName + " = new NSFCompositeState(nameof(" + oName + "), " + ownrName + 
                    ", " + enterAction + ", " + exitAction + ");");
            }
            if (state is StateMachineMetadata.Model.ChoiceState) 
                Ext.WriteTokensAtTabs(this, 3, oName + " = new NSFChoiceState(nameof(" + oName + "), " + ownrName + ");");
            if (state is StateMachineMetadata.Model.InitialState) 
                Ext.WriteTokensAtTabs(this, 3, oName + " = new NSFInitialState(nameof(" + oName + "), " + ownrName + ");");

         } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 243 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\t\t    #endregion States  instantiations\r\n\r\n\t        #region Transitions instantia" +
                    "tions\r\n");
            
            #line 247 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
  foreach (var group in model.NSF.GetGroupedTransitions())  {  
      if (group.Key == null) Ext.WriteTokensAtTabs(this, 3, "// root Transitions' definitions"); 
      else Ext.WriteTokensAtTabs(this, 3, "// From " + group.Key.Name + " Transitions' definitions");  
      foreach (var trans in group.GroupBy(g => g.Name).Select(g => g.First())) { 
            
            #line default
            #line hidden
            
            #line 251 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"

        var statement = trans.Name + " = new " + trans.ToNSFType() + "(nameof(" + trans.Name + ")"; 
        var actionName = trans.ActionName == null ? "null" : "async (c) => await " + trans.ActionName.ToValidCSharpName() + "(c)";
        var guardName = trans.GuardName.ToUpper() == "NONE" ? "null" : trans.GuardName;

        var eTrans = trans as ExternalTransition;
        if (eTrans != null)  {
            var triggerName = (eTrans.Trigger == null || string.IsNullOrEmpty(eTrans.Trigger.Name) ? "null" : "o" + eTrans.Trigger.Name).ToValidCSharpName();
            Ext.WriteTokensAtTabs(this, 3, statement + ", o" + eTrans.Source.Name + ", o" + eTrans.Target.Name 
                + ", " + triggerName + ", " + guardName + ", " + actionName + ");"); 
        }
        var iTrans = trans as InternalTransition;
        if (iTrans != null) { 
            var triggerName = (iTrans.Trigger == null || string.IsNullOrEmpty(iTrans.Trigger.Name) ? "null" : "o" + iTrans.Trigger.Name).ToValidCSharpName();
            Ext.WriteTokensAtTabs(this, 3, statement + ", o" + iTrans.OwnerState.Name
                + ", " + triggerName + ", " + guardName + ", " + actionName + ");"); 
        } 

            
            #line default
            #line hidden
            
            #line 269 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
    } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 271 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write(@"		    #endregion Transitions instantiations

            AfterCreateStateMachine();

        }

        public virtual void BeforeCreateStateMachine() { }
        public virtual void AfterCreateStateMachine() { }

        #region C# Events
        public delegate void StateChangesEventHandler(object sender, StateChangesEventArgs stateChangesEventArgs);
        public event StateChangesEventHandler StateChangesEvent;
        public event StateChangesEventHandler StateChangesAtStateEvent;
        //public delegate Task StateChangedEventHandler(PropertyChangedEventArgs e);
        //public delegate Task StateChangingEventHandler(PropertyChangedEventArgs e);
        //public event StateChangingEventHandler StateEnteredAsync;
        //public event StateChangedEventHandler StateExitedAsync;
        #endregion C# Events

        #region State Machine Methods

        #region States Actions

");
            
            #line 295 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
  foreach (var state in model.States.OfType<State>().OrderBy(s => s.Name))  {  
            
            #line default
            #line hidden
            
            #line 296 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
        if (state.EntryActions.Any()) {
            
            #line default
            #line hidden
            this.Write("        public virtual async Task ");
            
            #line 297 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(state.Name.ToValidCSharpName()));
            
            #line default
            #line hidden
            this.Write("EnteredAsync(NSFStateMachineContext oContext, NSFState state)\r\n        {\r\n       " +
                    "     try {\r\n                this.RaiseStateEnterEvent(oContext, state);\r\n");
            
            #line 301 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            foreach (var sAction in state.EntryActions.Where(a => string.IsNullOrEmpty(a) == false)) { 
            
            #line default
            #line hidden
            this.Write("                await MainModel.");
            
            #line 302 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sAction));
            
            #line default
            #line hidden
            this.Write("().ConfigureAwait(continueOnCapturedContext:false);\r\n");
            
            #line 303 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            }
            
            #line default
            #line hidden
            this.Write("            }\r\n            catch (Exception e)\r\n            {\r\n                ms" +
                    "_iLogger.LogException(ELogLevel.Error, e.Source, e);\r\n                this.SendS" +
                    "tateEvent(UndefinedFaultEvent);\r\n            }\r\n        }\r\n");
            
            #line 311 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
        }
            
            #line default
            #line hidden
            
            #line 312 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
        if (state.ExitActions.Any()) {
            
            #line default
            #line hidden
            this.Write("        public virtual async Task ");
            
            #line 313 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(state.Name.ToValidCSharpName()));
            
            #line default
            #line hidden
            this.Write("ExitedAsync(NSFStateMachineContext oContext, NSFState state)\r\n        {\r\n        " +
                    "    try {\r\n");
            
            #line 316 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            foreach (var sAction in state.ExitActions.Where(a => string.IsNullOrEmpty(a) == false)) { 
            
            #line default
            #line hidden
            this.Write("                await MainModel.");
            
            #line 317 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sAction));
            
            #line default
            #line hidden
            this.Write("().ConfigureAwait(continueOnCapturedContext:false);;\r\n");
            
            #line 318 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            }
            
            #line default
            #line hidden
            this.Write(@"                this.RaiseStateExitEvent(oContext, state);
            }
            catch (Exception e)
            {
                ms_iLogger.LogException(ELogLevel.Error, e.Source, e);
                this.SendStateEvent(UndefinedFaultEvent);
            }
        }
");
            
            #line 327 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
        }
            
            #line default
            #line hidden
            
            #line 328 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n        #endregion States Actions\r\n\r\n\t    #region Transitions Actions\r\n");
            
            #line 333 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
  var previousActionNames = new HashSet<string>();
    foreach (var group in model.NSF.GetGroupedTransitions())  {  
        foreach (var trans in group.GroupBy(g => g.Name).Select(g => g.First()).Where(t => string.IsNullOrEmpty(t.ActionName) == false)) { 
            if (previousActionNames.Add(trans.ActionName) == false) continue; //avoid duplicates
            var eTrans= trans as ExternalTransition;
            var iTrans= trans as InternalTransition;
            string triggerName = "'trigger is missing'"; 
            if (trans.Trigger != null) triggerName = trans.Trigger.Name; 

            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n");
            
            #line 343 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
          if (eTrans != null) Ext.WriteTokensAtTabs(this, 2,"/// This method is called when the '" +  eTrans.SourceState.Name + "' transitions to '" + eTrans.Target.Name + "'");
            else Ext.WriteTokensAtTabs(this, 2,"/// This method is called when transitioning from '" +  iTrans.SourceState.Name + "'"); 
            
            #line default
            #line hidden
            this.Write("        /// triggered by \'");
            
            #line 345 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(triggerName));
            
            #line default
            #line hidden
            this.Write("\' \r\n        /// </summary>\r\n        /// <param name=\"oContext\">Information about " +
                    "the states before and after the transition as well as the transition and trigger" +
                    ".</param>\r\n        /// <returns>Nothing</returns>\r\n        public virtual async " +
                    "Task ");
            
            #line 349 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.ActionName));
            
            #line default
            #line hidden
            this.Write("(NSFStateMachineContext oContext)\r\n        {\r\n");
            
            #line 351 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
          if (trans.Actions != null) { 
            
            #line default
            #line hidden
            this.Write("            try {\r\n");
            
            #line 353 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
                var previousActions = new HashSet<string>();
                foreach (var tAct in trans.Actions) { 
                    if (previousActions.Add(tAct) == false) continue;
                    if (StringExtensions.IsValidIdentifier(tAct) == false) { 
                        Ext.WriteTokensAtTabs(this,4, "// +++ Invalid Action name '" + tAct.ToString() + "' in " + triggerName);
                        continue; 
                    }
                    Ext.WriteTokensAtTabs(this, 4,"await MainModel." +  tAct + "(oContext).ConfigureAwait(continueOnCapturedContext:false);");
            }

            
            #line default
            #line hidden
            this.Write("            }\r\n            catch (Exception e) {\r\n                ms_iLogger.LogE" +
                    "xception(ELogLevel.Error, e.Source, e);\r\n                this.SendStateEvent(Und" +
                    "efinedFaultEvent);\r\n            }\r\n");
            
            #line 368 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            } else {
            
            #line default
            #line hidden
            this.Write("            await Task.CompletedTask;\r\n");
            
            #line 370 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            } 
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n");
            
            #line 373 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
        } 
    } 
            
            #line default
            #line hidden
            this.Write("\t\t#endregion Transitions Actions\r\n\r\n\t    #region Transitions Choices and Guards\r\n" +
                    "");
            
            #line 378 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
  var previousGuards = new HashSet<string>();
    foreach (var group in model.NSF.GetGroupedTransitions())  {  
        foreach (var trans in group.GroupBy(g => g.Name).Select(g => g.First()).Where(t => string.IsNullOrEmpty(t.GuardName) == false)) { 
            if (previousGuards.Add(trans.GuardName) == false) continue; //avoid duplicates 
            if (trans.GuardName.ToUpper() == "NONE") continue; //skip Guards named "None"
            if (trans.GuardName.ToUpper() == "ELSE") continue; //skip Guards named "Else"
            var simulationIndicatorName = trans.GuardName + "_InSimulationMode";
            var simulationValueName= trans.GuardName + "_SimulatedValue";

            
            #line default
            #line hidden
            this.Write("        #region ");
            
            #line 387 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.GuardName));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        public bool ");
            
            #line 389 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(simulationIndicatorName));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n        public bool ");
            
            #line 390 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(simulationValueName));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n\r\n        /// <summary>\r\n        /// A Guard function returning t" +
                    "he State of \'");
            
            #line 393 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.GuardName));
            
            #line default
            #line hidden
            this.Write("\'.\r\n        /// Defined at Transition ");
            
            #line 394 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.Name));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </summary>\r\n        /// <param name=\"oContext\">Information about th" +
                    "e states before and after the transition as well as the transition and trigger.<" +
                    "/param>\r\n        /// <returns>guard result</returns>\r\n        public virtual boo" +
                    "l ");
            
            #line 398 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.GuardName));
            
            #line default
            #line hidden
            this.Write("(NSFStateMachineContext oContext)\r\n        {\r\n            if (");
            
            #line 400 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(simulationIndicatorName));
            
            #line default
            #line hidden
            this.Write(" == true) \r\n                return ");
            
            #line 401 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(simulationValueName));
            
            #line default
            #line hidden
            this.Write(";\r\n            else \r\n                return MainModel.");
            
            #line 403 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.GuardName));
            
            #line default
            #line hidden
            this.Write(";\r\n        }\r\n        #endregion ");
            
            #line 405 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trans.GuardName));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 407 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
        } 
    } 
            
            #line default
            #line hidden
            this.Write(@"		#endregion Transitions Choices and Guards

	    #region Other methods

        public bool StartStateMachine()
        {
            // Support StateMachine specific log
        
            NSFTraceLog.PrimaryTraceLog.Enabled = true;
            StateChangeActions += HandleStateChange;
        
            // Start State machine
            startStateMachine();
        
            return true;
        }

        public bool StopStateMachine()
        {
            stopStateMachine();
            // Save trace log
            NSFTraceLog.PrimaryTraceLog.saveLog(""");
            
            #line 430 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ProjectName));
            
            #line default
            #line hidden
            this.Write("StateMachineLog.xml\");\r\n            NSFEnvironment.terminate();\r\n        \r\n      " +
                    "      return true;\r\n        }\r\n\r\n");
            this.Write(@"        //public bool InvokeEvent(NSFEvent oEvent, object oEventData)
        //{
        //    bool bEventHandled = false;
        //    //TODO: log event received
        //    try
        //    {
        //        if (oEventData == null) queueEvent(oEvent);
        //        else queueEvent(oEvent, new CStateMachineEventData(oEventData));
        //        bEventHandled = true;
        //        //TODO: log event completed
        //    }
        //    catch (Exception)
        //    {
        //        bEventHandled = false;
        //        //TODO: log event failed
        //    }

        //    return bEventHandled;
        //}");
            this.Write("\r\n\r\n        #region Indicators Dictionary\r\n        private Dictionary<string, Pro" +
                    "pertyInfo> indicatorsDictionary;\r\n        public Dictionary<string, PropertyInfo" +
                    "> IndicatorsDictionary\r\n        {\r\n            get\r\n            {\r\n             " +
                    "   if (indicatorsDictionary == null)\r\n                {\r\n                    ind" +
                    "icatorsDictionary = new Dictionary<string, PropertyInfo>();\r\n                   " +
                    " var indicatorProperties = MainModel.GetType().GetProperties(BindingFlags.Instan" +
                    "ce | BindingFlags.Public)\r\n                        .Where(p => p.Name.StartsWith" +
                    "(\"IsIn\") && p.PropertyType == typeof(bool));\r\n                    indicatorPrope" +
                    "rties.ToList().ForEach(p => indicatorsDictionary.Add(p.Name, p));\r\n             " +
                    "   }\r\n                return indicatorsDictionary;\r\n            }\r\n        }\r\n  " +
                    "      #endregion Indicators Dictionary\r\n\r\n        /// <summary>\r\n        /// Thi" +
                    "s method is called when a State is Entered.\r\n        /// Must be synchronous, no" +
                    "n-blocking, no-locks, return on when-all-completed only and run all subscribers " +
                    "concurrently\r\n        /// </summary>\r\n        /// <param name=\"oContext\">Informa" +
                    "tion about the states before and after the transition as well as the transition " +
                    "and trigger.</param> \r\n        /// <param name=\"state\">State that is changing.</" +
                    "param> \r\n        /// <returns>Nothing</returns>\r\n        protected void RaiseSta" +
                    "teEnterEvent(NSFStateMachineContext oContext, NSFState state)\r\n        {\r\n      " +
                    "      //TODO: queue new state\r\n            var propName = \"IsIn\" + state.Name.Su" +
                    "bstring(1);\r\n            if (state.GetType() == typeof(NSFCompositeState) && Ind" +
                    "icatorsDictionary.ContainsKey(propName))\r\n                IndicatorsDictionary[p" +
                    "ropName].SetValue(MainModel, true);\r\n\r\n            //if (StateEnteredAsync != nu" +
                    "ll)\r\n            //{\r\n            //    var asyncHandlers = StateEnteredAsync.Ge" +
                    "tInvocationList().Cast<StateChangingEventHandler>();\r\n            //    var asyn" +
                    "cHandlerTasks = new List<Task>();\r\n            //    asyncHandlers.ToList().ForE" +
                    "ach(delgt => asyncHandlerTasks.Add(new Task(() => delgt(new PropertyChangedEvent" +
                    "Args(state.Name)))));\r\n            //    await Task.WhenAll(asyncHandlerTasks.To" +
                    "Array());\r\n            //}\r\n        }\r\n\r\n        /// <summary>\r\n        /// This" +
                    " method is called when a State is exiting.\r\n        /// Must be synchronous, non" +
                    "-blocking, no-locks, return on when-all-completed only and run all subscribers c" +
                    "oncurrently\r\n        /// </summary>\r\n        /// <param name=\"oContext\">Informat" +
                    "ion about the states before and after the transition as well as the transition a" +
                    "nd trigger.</param> \r\n        /// <param name=\"state\">State that is changing.</p" +
                    "aram> \r\n        /// <returns>Nothing</returns>\r\n        protected void RaiseStat" +
                    "eExitEvent(NSFStateMachineContext oContext, NSFState state)\r\n        {\r\n        " +
                    "    //TODO: queue new state\r\n            var propName = \"IsIn\" + state.Name.Subs" +
                    "tring(1);\r\n            if (state.GetType() == typeof(NSFCompositeState) && Indic" +
                    "atorsDictionary.ContainsKey(propName))\r\n                IndicatorsDictionary[pro" +
                    "pName].SetValue(MainModel, false);\r\n\r\n            //if (StateExitedAsync != null" +
                    ")\r\n            //{\r\n            //    var asyncHandlers = StateExitedAsync.GetIn" +
                    "vocationList().Cast<StateChangedEventHandler>();\r\n            //    var asyncHan" +
                    "dlerTasks = new List<Task>();\r\n            //    asyncHandlers.ToList().ForEach(" +
                    "delgt =>\r\n            //        asyncHandlerTasks.Add(new Task(() => delgt(new P" +
                    "ropertyChangedEventArgs(state.Name)))));\r\n            //    await Task.WhenAll(a" +
                    "syncHandlerTasks.ToArray());\r\n            //}\r\n        }\r\n\r\n        /// <summary" +
                    ">}\r\n        /// Called by the NSF whenever there is a state change}\r\n        ///" +
                    " </summary>}\r\n        /// <param name=\"oContext\"></param>}\r\n        private void" +
                    " HandleStateChange(NSFStateMachineContext oContext)\r\n        {\r\n            Prev" +
                    "iousState = CurrentState;\r\n            CurrentState = GetState(oContext.Entering" +
                    "State.Name);\r\n            //PreviousStateName = CurrentStateName;\r\n            /" +
                    "/if (CurrentStateName == null) CurrentStateName = \"none\";\r\n            //else Cu" +
                    "rrentStateName = ((EState)CurrentState).ToString();\r\n            PreviousContext" +
                    " = CurrentContext;\r\n            CurrentContext = oContext;\r\n\r\n            if (oC" +
                    "ontext.EnteringState is NSFChoiceState) //(strNewState.StartsWith(\"Is\"))\r\n      " +
                    "      {\r\n                string strMsg = $@\"Evaluating {CurrentState} state afte" +
                    "r {PreviousState} state.\";\r\n                ms_iLogger.XLog(ELogLevel.Info, strM" +
                    "sg, new SCodeContext(CurrentState));\r\n                return;\r\n            }\r\n  " +
                    "          else\r\n            {\r\n                string strMsg;\r\n                i" +
                    "f (PreviousState == null)\r\n                    strMsg = $\"Starting at the {Curre" +
                    "ntState} state!\";\r\n                else\r\n                    strMsg = $\"Leaving " +
                    "{PreviousState} state to {CurrentState} state!\";\r\n\r\n                ms_iLogger.X" +
                    "Log(ELogLevel.Info, strMsg, new SCodeContext(CurrentState));\r\n                Sy" +
                    "stemState = oContext.EnteringState.Name;\r\n            }\r\n\r\n            // Is the" +
                    "re an operator prompt to display for this new state?\r\n            (string Operat" +
                    "orPrompt, bool HighlightOperator) oPromptDetails = (\"\", false);\r\n            if " +
                    "(CurrentState != null)\r\n                OperatorPromptForStateDict.TryGetValue((" +
                    "(EState) CurrentState), out oPromptDetails);\r\n            \r\n            StateCha" +
                    "ngesEventArgs.OperatorPrompt = LastOperatorPrompt = oPromptDetails.OperatorPromp" +
                    "t;\r\n            StateChangesEventArgs.HandledStateName = CurrentState.ToString()" +
                    ";\r\n            StateChangesEventArgs.HighlightPrompt = oPromptDetails.HighlightO" +
                    "perator;\r\n\r\n            // Notify anyone subscribed to the State Changed event\r\n" +
                    "            try\r\n            {\r\n                StateChangesEvent?.Invoke(this, " +
                    "StateChangesEventArgs);\r\n            }\r\n            catch (Exception e)\r\n       " +
                    "     {\r\n                ms_iLogger.LogException(ELogLevel.Fatal, e.Message, e);\r" +
                    "\n            }\r\n\r\n            try\r\n            {\r\n                StateChangesAt" +
                    "StateEvent?.Invoke(this, StateChangesEventArgs);\r\n            }\r\n            cat" +
                    "ch (Exception e)\r\n            {\r\n                ms_iLogger.LogException(ELogLev" +
                    "el.Fatal, e.Message, e);\r\n            }\r\n        }\r\n\r\n        public bool SendSt" +
                    "ateEvent(NSFEventName eventName, object oEventData = null, [CallerLineNumber] in" +
                    "t lineNumber = 0, [CallerMemberName] string caller = null)\r\n        {\r\n         " +
                    "   if (!Triggers.ContainsKey(eventName))\r\n            {\r\n                ms_iLog" +
                    "ger.XLog(ELogLevel.Error, \"Invalid Event passed to SendStateEvent!\", new SCodeCo" +
                    "ntext(CurrentState));\r\n                return false;\r\n            }\r\n\r\n         " +
                    "   try\r\n            {\r\n\r\n                // Get event from enum passed in\r\n     " +
                    "           NSFEvent oEvent = Triggers[eventName];\r\n\r\n                // Handle e" +
                    "vent data\r\n                if (oEventData == null)\r\n                {\r\n         " +
                    "           // queue the event to the StateMachine\r\n                    queueEven" +
                    "t(oEvent);\r\n                }\r\n                else\r\n                {\r\n        " +
                    "            // Queue the event and EventData to the state machine\r\n             " +
                    "       CStateMachineEventData oStateMachineEventData = new CStateMachineEventDat" +
                    "a(oEventData);\r\n                    queueEvent(oEvent, oStateMachineEventData);\r" +
                    "\n                }\r\n\r\n                // Log Event\r\n                string strMs" +
                    "g = $@\" Received Event \"\"{eventName}\"\" from {caller} @ {lineNumber}\";\r\n         " +
                    "       ms_iLogger.XLog(ELogLevel.Info, strMsg, new SCodeContext(CurrentState));\r" +
                    "\n\r\n                return true;\r\n            }\r\n            catch (Exception ex)" +
                    "\r\n            {\r\n                string strMsg = String.Format(@\"Error!  Unable " +
                    "to handle handle event ");
            
            #line 599 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Session["typeName"].ToString()));
            
            #line default
            #line hidden
            this.Write(@"!"", eventName);
                ms_iLogger.LogException(ELogLevel.Error, strMsg, ex);
            }

            return false;
        }


        public string GetState(EState eState) { 
            var name = ""o"" + eState + ""State""; 
            if (GetState(name) == null) name = ""o"" + eState;
            else if (GetState(name) == null) name = eState.ToString();
            return name;
        }

        public EState? GetState(string strState)
        {
            var strippedName = strState.Substring(1); //remove prefix ""o""
            if (strippedName.EndsWith(""State""))
                strippedName = strippedName.Substring(0, strippedName.Length - ""State"".Length); //Remove suffix State
            EState eStateNew;
            var nullableState = Enum.TryParse(strippedName, out eStateNew) ? (EState?)eStateNew : null;

            return nullableState;
        }

	    #endregion Other methods

        #endregion State Machine Methods
	}

    #region Enums
        #region Trigger's enum
        public partial class TriggerName
        {
");
            
            #line 634 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
 foreach (var triggerName in model.NSF.GetTriggerNames())  { 
            
            #line default
            #line hidden
            this.Write("\t\t    public const NSFEventName ");
            
            #line 635 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(triggerName.ToValidCSharpName()));
            
            #line default
            #line hidden
            this.Write(" = nameof(");
            
            #line 635 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(triggerName.ToValidCSharpName()));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 636 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n        #endregion Trigger\'s enum\r\n \r\n    public enum EState\r\n    {\r\n\t" +
                    "\t    none,\r\n");
            
            #line 643 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
 foreach (var state in model.States.OrderBy(s => s.Name))  { 
            
            #line default
            #line hidden
            this.Write("\t\t    ");
            
            #line 644 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(state.Name.ToValidCSharpName().Replace("State","")));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 645 "c:\projects\PROJ_Common\DevBranches\DevDale2\GenSys\Apps\StateMachineCodeGenerator-T4\Main\System\Templates\StateMachineBaseTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    }\r\n    #endregion Enums\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class StateMachineBaseTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
